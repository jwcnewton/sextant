import { SextantFeatures, sextantScenarios } from './sextant-types.generated';

export interface SextantTestFeatureContext<IScenarioName extends string> {
  test: SextantTest<IScenarioName>;
  /**
   * Test whether all scenarios have been tested
   */
  testCoverage: () => void;
}

interface SextantTest<IScenarioName extends string> {
  (name: IScenarioName, fn?: jest.ProvidesCallback, timeout?: number): void;
}

/**
 * Describe a feature of Sextant in a jest describe block
 */
export const describeSextantFeature = <IFeature extends keyof SextantFeatures>(
  featureName: IFeature,
  testFunc: (
    testContext: SextantTestFeatureContext<
      SextantFeatures[IFeature]['scenarios']
    >,
  ) => void,
) => {
  const testsRegistered: string[] = [];
  const desiredScenarios = sextantScenarios[featureName] || [];

  describe(featureName, () => {
    testFunc({
      test: (name, ...args) => {
        testsRegistered.push(name);
        test(name, ...args);
      },
      testCoverage: () => {
        test('Coverage of all Sextant scenarios', () => {
          desiredScenarios.forEach((scenarioName) => {
            expect(testsRegistered).toContain(scenarioName);
          });
        });
      },
    });
  });
};
