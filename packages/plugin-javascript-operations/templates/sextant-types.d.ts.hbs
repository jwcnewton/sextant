export interface SextantFeatures {
  {{#each features }}
  '{{this.name}}': {
    scenarios:
      {{#each this.scenarios}}
      | "{{this.name}}"
      {{/each}}
      {{#unless this.scenarios}}
      never;
      {{/unless}}
    events: {
      {{#each this.allSteps}}
      '{{this.event}}': {{pascalcase ../name}}__{{this.event}} & { type: "{{this.event}}" }
      {{/each}}
    }
    actors: {
      {{#each this.actorsWithSteps}}
      '{{this.name}}': {
        from: {
          {{#each this.from}}
          '{{this.env}}': {
            in:
            {{#each this.in}}
              | {{pascalcase ../../../name}}__{{this.event}} & { type: "{{this.event}}" }
            {{/each}}
            {{#unless this.in}}never;{{/unless}}
            out:
            {{#each this.out}}
              | {{pascalcase ../../../name}}__{{this.event}} & { type: "{{this.event}}" }
            {{/each}}
            {{#unless this.out}}never;{{/unless}}
          }
          {{/each}}
        }
        to: {
          {{#each this.to}}
          '{{this.env}}': {
            in:
            {{#each this.in}}
              | {{pascalcase ../../../name}}__{{this.event}} & { type: "{{this.event}}" }
            {{/each}}
            {{#unless this.in}}never;{{/unless}}
            out:
            {{#each this.out}}
              | {{pascalcase ../../../name}}__{{this.event}} & { type: "{{this.event}}" }
            {{/each}}
            {{#unless this.out}}never;{{/unless}}
          }
          {{/each}}
        }
      }
      {{/each}}
    }
  }
  {{/each}}
}

export interface SextantActors {
  {{#each actors}}
  '{{this.name}}': {
    from: {
      {{#each this.from}}
      '{{this.env}}': {
        in:
        {{#each this.in}}
          | {{pascalcase this.featureName}}__{{this.rawEvent}} & { type: "{{this.event}}" }
        {{/each}}
        {{#unless this.in}}never;{{/unless}}
        out:
        {{#each this.out}}
          | {{pascalcase this.featureName}}__{{this.rawEvent}} & { type: "{{this.event}}" }
        {{/each}}
        {{#unless this.out}}never;{{/unless}}
      }
      {{/each}}
    }
    to: {
      {{#each this.to}}
      '{{this.env}}': {
        in:
        {{#each this.in}}
          | {{pascalcase this.featureName}}__{{this.rawEvent}} & { type: "{{this.event}}" }
        {{/each}}
        {{#unless this.in}}never;{{/unless}}
        out:
        {{#each this.out}}
          | {{pascalcase this.featureName}}__{{this.rawEvent}} & { type: "{{this.event}}" }
        {{/each}}
        {{#unless this.out}}never;{{/unless}}
      }
      {{/each}}
    }
  };
  {{/each}}
}

export interface EventConfig {
  in: { type: string };
  out: { type: string };
}

type MaybePromise<T> = Promise<T> | T;

type SextantPromise<TEventConfig extends EventConfig> = (
  event: TEventConfig['in'],
) => MaybePromise<
  TEventConfig['out'] extends never ? void : TEventConfig['out']
>;

/**
 * A handler type built by Sextant.
 *
 * Usage:
 *
 * ```ts
 * const handler: SextantHandler<
 *   'featureName',
 *   'fromThisActor',
 *   'toThisActor',
 * > = () => {};
 * ```
 */
export type SextantHandler<
  IFeature extends keyof SextantFeatures,
  IFrom extends keyof SextantFeatures[IFeature]["actors"] = any,
  // @ts-ignore
  ITarget extends keyof SextantFeatures[IFeature]["actors"][IFrom]["from"] = any
> = SextantPromise<
  // @ts-ignore
  SextantFeatures[IFeature]["actors"][IFrom]["to"][ITarget]
>;

/**
 * An event type built by Sextant.
 *
 * Usage:
 *
 * ```ts
 * const event: SextantEvent<'featureName', 'fromThisActor', 'toThisActor'>;
 * const specificEvent: SextantEvent<
 *   'featureName',
 *   'fromThisActor',
 *   'toThisActor',
 *   'SPECIFIC_EVENT_TYPE'
 * >;
 * ```
 */
export type SextantEvent<
  IFeature extends keyof SextantFeatures,
  IFrom extends keyof SextantFeatures[IFeature]["actors"] = any,
  // @ts-ignore
  ITarget extends keyof SextantFeatures[IFeature]["actors"][IFrom]["from"] = any,
  // @ts-ignore
  IType extends SextantFeatures[IFeature]["actors"][IFrom]["to"][ITarget]["in"]["type"] = any
> = Extract<
  // @ts-ignore
  SextantFeatures[IFeature]["actors"][IFrom]["to"][ITarget]["in"],
  { type: IType }
>;

export type SextantEventByFeature<
  IFeature extends keyof SextantFeatures,
  IType extends keyof SextantFeatures[IFeature]['events']
> = SextantFeatures[IFeature]['events'][IType];

/**
 * Fetch all events from an environment to another environment,
 * across features
 */
export type SextantAllEventsToActor<
  IFrom extends keyof SextantActors,
  ITo extends keyof SextantActors[IFrom]['from'] = any,
  // @ts-ignore
  IType extends SextantActors[IFrom]['from'][ITo]['out']['type'] = any
> = Extract<
  // @ts-ignore
  SextantActors[IFrom]['from'][ITo]['out'],
  { type: IType }
>;

export const sextantScenarios: {
  {{#each features}}
  '{{this.name}}': [
    {{#each this.scenarios}}
    '{{this.name}}',
    {{/each}}
  ],
  {{/each}}
};